[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/misc/TicToc.hpp"

#include "bi/random/Random.hpp"

#include "bi/state/State.hpp"
#include "bi/state/OptimiserState.hpp"

#include "bi/buffer/ParticleFilterBuffer.hpp"
#include "bi/buffer/KalmanFilterBuffer.hpp"

#include "bi/cache/AdaptivePFCache.hpp"
#include "bi/cache/BootstrapPFCache.hpp"
#include "bi/cache/ExtendedKFCache.hpp"

#include "bi/netcdf/InputNetCDFBuffer.hpp"
#include "bi/netcdf/OptimiserNetCDFBuffer.hpp"

#include "bi/null/InputNullBuffer.hpp"

#include "bi/optimiser/misc.hpp"
#include "bi/optimiser/NelderMeadOptimiser.hpp"

#include "bi/simulator/ForcerFactory.hpp"
#include "bi/simulator/ObserverFactory.hpp"
#include "bi/filter/FilterFactory.hpp"
#include "bi/resampler/ResamplerFactory.hpp"
#include "bi/stopper/StopperFactory.hpp"

#ifdef ENABLE_MPI
//#include "bi/mpi/handler/HandlerFactory.hpp"
#include "bi/mpi/adapter/DistributedAdapterFactory.hpp"
#include "bi/mpi/resampler/DistributedResamplerFactory.hpp"
#include "bi/mpi/stopper/DistributedStopperFactory.hpp"
//#include "bi/mpi/TreeNetworkNode.hpp"
//#include "bi/mpi/Server.hpp"
//#include "bi/mpi/Client.hpp"
#endif

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <sys/time.h>
#include <getopt.h>

#ifdef ENABLE_CUDA
#define LOCATION ON_DEVICE
#else
#define LOCATION ON_HOST
#endif

int main(int argc, char* argv[]) {
  using namespace bi;

  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]

  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  boost::mpi::communicator world;
  const int rank = world.rank();
  const int size = world.size();
  NPARTICLES /= size;
  if (size > 1) {
    std::stringstream suffix;
    suffix << "." << rank;
    OUTPUT_FILE += suffix.str();
  }
  #else
  const int rank = 0;
  const int size = 1;
  #endif
    
  /* bi init */
  bi_init(NTHREADS);

  /* random number generator */
  Random rng(SEED);

  /* model */
  model_type m;
  
  /* input file */
  [% IF client.get_named_arg('input-file') != '' %]
  InputNetCDFBuffer bufInput(m, INPUT_FILE, INPUT_NS, INPUT_NP);
  [% ELSE %]
  InputNullBuffer bufInput(m);
  [% END %]
  
  /* init file */
  [% IF client.get_named_arg('init-file') != '' %]
  InputNetCDFBuffer bufInit(m, INIT_FILE, INIT_NS, INIT_NP);
  [% ELSE %]
  InputNullBuffer bufInit(m);
  [% END %]

  /* obs file */
  [% IF client.get_named_arg('obs-file') != '' %]
  InputNetCDFBuffer bufObs(m, OBS_FILE, OBS_NS, OBS_NP);
  [% ELSE %]
  InputNullBuffer bufObs(m);
  [% END %]

  /* schedule */
  Schedule sched(m, START_TIME, END_TIME, NOUTPUTS, NBRIDGES, bufInput, bufObs, WITH_OUTPUT_AT_OBS);

  /* numbers of particles */
  NPARTICLES = bi::roundup(NPARTICLES);
  STOPPER_MAX = bi::roundup(STOPPER_MAX);
  STOPPER_BLOCK = bi::roundup(STOPPER_BLOCK);

  /* output */
  [% IF client.get_named_arg('output-file') != '' %]
  typedef OptimiserNetCDFBuffer buffer_type;
  [% ELSE %]
  typedef OptimiserNullBuffer buffer_type;
  [% END %]

  /* resampler for x-particles */
  [% IF client.get_named_arg('resampler') == 'metropolis' %]
  BOOST_AUTO(filterResam, (ResamplerFactory::createMetropolisResampler(C, ESS_REL)));
  [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
  BOOST_AUTO(filterResam, ResamplerFactory::createRejectionResampler());
  [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
  BOOST_AUTO(filterResam, ResamplerFactory::createMultinomialResampler(ESS_REL));
  [% ELSIF client.get_named_arg('resampler') == 'stratified' %]
  BOOST_AUTO(filterResam, ResamplerFactory::createStratifiedResampler(ESS_REL));
  [% ELSE %]
  BOOST_AUTO(filterResam, ResamplerFactory::createSystematicResampler(ESS_REL));
  [% END %]

  /* stopper for x-particles */
  [% IF client.get_named_arg('stopper') == 'sumofweights' %]
  BOOST_AUTO(filterStopper, (StopperFactory::createSumOfWeightsStopper(STOPPER_THRESHOLD, STOPPER_MAX, sched.numObs())));
  [% ELSIF client.get_named_arg('stopper') == 'miness' %]
  BOOST_AUTO(filterStopper, (StopperFactory::createMinimumESSStopper(STOPPER_THRESHOLD, STOPPER_MAX, sched.numObs())));
  [% ELSIF client.get_named_arg('stopper') == 'stddev' %]
  BOOST_AUTO(filterStopper, (StopperFactory::createStdDevStopper(STOPPER_THRESHOLD, STOPPER_MAX, sched.numObs())));
  [% ELSIF client.get_named_arg('stopper') == 'var' %]
  BOOST_AUTO(filterStopper, (StopperFactory::createVarStopper(STOPPER_THRESHOLD, STOPPER_MAX, sched.numObs())));
  [% ELSE %]
  BOOST_AUTO(filterStopper, (StopperFactory::createDefaultStopper(NPARTICLES, STOPPER_MAX, sched.numObs())));
  [% END %]

  OptimiserNetCDFBuffer out(m, sched.numOutputs(), OUTPUT_FILE, REPLACE);

  /* state */
  [% IF client.get_named_arg('filter') == 'kalman' %]
  NPARTICLES = 1;
  typedef ExtendedKFState<model_type,LOCATION> state_type;
  typedef KalmanFilterBuffer<ExtendedKFCache<LOCATION> > cache_type;
  [% ELSIF client.get_named_arg('filter') == 'lookahead' || client.get_named_arg('filter') == 'bridge' %]
  typedef AuxiliaryPFState<model_type,LOCATION> state_type;
  typedef ParticleFilterBuffer<BootstrapPFCache<LOCATION> > cache_type;
  [% ELSIF client.get_named_arg('filter') == 'adaptive' %]
  typedef BootstrapPFState<model_type,LOCATION> state_type;
  typedef ParticleFilterBuffer<AdaptivePFCache<LOCATION> > cache_type;
  [% ELSE %]
  typedef BootstrapPFState<model_type,LOCATION> state_type;
  typedef ParticleFilterBuffer<BootstrapPFCache<LOCATION> > cache_type;
  [% END %]

  OptimiserState<model_type,LOCATION,state_type,cache_type> s(m, NPARTICLES, sched.numObs(), sched.numOutputs());

  /* simulator */
  BOOST_AUTO(in, bi::ForcerFactory<LOCATION>::create(bufInput));
  BOOST_AUTO(obs, ObserverFactory<LOCATION>::create(bufObs));

  /* filter */
  [% IF client.get_named_arg('filter') == 'kalman' %]
    BOOST_AUTO(filter, (FilterFactory::createExtendedKF(m, *in, *obs)));
  [% ELSIF client.get_named_arg('filter') == 'lookahead' %]
    BOOST_AUTO(filter, (FilterFactory::createLookaheadPF(m, *in, *obs, *filterResam)));
  [% ELSIF client.get_named_arg('filter') == 'bridge' %]
    BOOST_AUTO(filter, (FilterFactory::createBridgePF(m, *in, *obs, *filterResam)));
  [% ELSIF client.get_named_arg('filter') == 'adaptive' %]
    BOOST_AUTO(filter, (FilterFactory::createAdaptivePF(m, *in, *obs, *filterResam, *stopper, NPARTICLES, STOPPER_BLOCK)));
  [% ELSE %]
    BOOST_AUTO(filter, (FilterFactory::createBootstrapPF(m, *in, *obs, *filterResam)));
  [% END %]

  /* optimiser */
  OptimiserMode mode;
  if (TARGET.compare("posterior") == 0) {
    mode = MAXIMUM_A_POSTERIORI;
  } else {
    mode = MAXIMUM_LIKELIHOOD;
  }
  BOOST_AUTO(optimiser, (NelderMeadOptimiserFactory<LOCATION>::create(m, *filter, mode)));

  /* optimise */
  #ifdef ENABLE_GPERFTOOLS
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  #endif

  optimiser->optimise(rng, sched.begin(), sched.end(), s, out, bufInit, SIMPLEX_SIZE_REL, STOP_STEPS, STOP_SIZE);
  /* out.flush(); */

  #ifdef ENABLE_GPERFTOOLS
  ProfilerStop();
  #endif

  return 0;
}
